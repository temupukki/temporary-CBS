// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model personalCustomer {
  id               String   @id @default(uuid()) // SIF ID
  customerNumber   String   @unique // Bank-wide customer number
  tinNumber        String?
  firstName        String
  middleName       String
  lastName         String
  mothersName      String
  gender           String
  maritalStatus    String
  dateOfBirth      DateTime
  nationalId       String   @unique
  phone            String   @unique
  email            String?  @unique
  region           String
  zone             String
  city             String
  subcity          String
  woreda           String
  monthlyIncome    Float
  status           String   @default("ACTIVE")
  nationalidUrl    String?
  agreementFormUrl String?
  accountType      String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

}

model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  role      Userrole  @default(USER)
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}
enum Userrole{
  ADMIN
  USER
}


model CompanyCustomer {
  id                  String    @id @default(cuid())
  customerNumber      String    @unique
  tinNumber           String    @unique
  companyName         String
  businessType        String
  registrationNumber  String    @unique
  registrationDate    DateTime
  numberOfEmployees   Int
  contactPersonName   String
  contactPersonPosition String
  phone               String
  email               String
  region              String
  zone                String
  city                String
  subcity             String
  woreda              String
  annualRevenue       Float
  businessLicenseUrl  String
  agreementFormUrl    String
  accountType         String
   status             String?   @default("ACTIVE")
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt

  @@map("company_customers")
}